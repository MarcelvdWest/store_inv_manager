{"version":3,"sources":["components/AddStockForm/AddStockForm.js","components/BuyersForm/BuyersForm.js","components/ViewStock/ViewStock.js","containers/App.js","reportWebVitals.js","index.js"],"names":["items","item","qty","price","AddStockForm","handleItemChange","event","target","value","console","log","handleQtyChange","handlePriceChange","handleEnter","key","props","onSubmitItems","onButtonPress","this","error","msg","status","tag","className","Form","Group","Label","htmlFor","Control","as","id","onChange","custom","type","onKeyPress","autoComplete","Button","variant","onClick","Component","email","handleEmailChange","onSubmitOrder","stateItems","avrPrice","Table","striped","bordered","hover","size","toFixed","initialState","count","emails","loc","App","state","currQty","Number","totalQty","currAvr","currCount","totalAvr","setState","match","includes","push","changeLocation","btn","Navbar","bg","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0add89d3.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './AddStockForm.css'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { MDBTypography } from 'mdbreact'\r\n\r\n\r\nconst items = {\r\n    item: '',\r\n    qty: 0,\r\n    price: 0\r\n}\r\n\r\n\r\nclass AddStockForm extends Component {\r\n\r\n    //updates item variable when user types\r\n    handleItemChange = (event) => {\r\n        items.item = event.target.value\r\n        console.log(items.item)\r\n    }\r\n\r\n    //updates qty variable when user types\r\n    handleQtyChange = (event) => {\r\n        items.qty = event.target.value\r\n        console.log(items.qty)\r\n    }\r\n\r\n    //updates price variable when user types\r\n    handlePriceChange = (event) => {\r\n        items.price = event.target.value\r\n        console.log(items.price)\r\n    }\r\n\r\n    //Triggers onSubmit method when enter is pressed\r\n    handleEnter = (event) => {\r\n        if(event.key === 'Enter'){\r\n            this.props.onSubmitItems(items)\r\n        }\r\n    }\r\n\r\n    onButtonPress = () => {\r\n        this.props.onSubmitItems(items)\r\n    }\r\n\r\n    render(){\r\n\r\n        const { error, msg } = this.props\r\n\r\n        return(\r\n            <div>\r\n                {\r\n                    //Dynamic changes to page depending on user action\r\n                    error.status === 'true' \r\n                        ?\r\n                            <center>\r\n                                <MDBTypography tag='h2'>Add New Items</MDBTypography>\r\n                                <MDBTypography tag='h5' className='error'>{ error.msg }</MDBTypography>\r\n                            </center>\r\n                        :    \r\n                            (\r\n                                msg !== '' \r\n                                    ?\r\n                                    <center>\r\n                                        <MDBTypography tag='h2'>Add New Items</MDBTypography>\r\n                                        <MDBTypography tag='h5' >{ msg }</MDBTypography>\r\n                                    </center>\r\n                                :\r\n                                    <center>\r\n                                        <MDBTypography tag='h2' className='innitialAddHeading'>Add New Items</MDBTypography>\r\n                                    </center>    \r\n                            )                                    \r\n                }\r\n                <Form>\r\n                    <Form.Group>\r\n                        <Form.Label htmlFor='item'>Item: </Form.Label>\r\n                        <Form.Control \r\n                            as='select'\r\n                            id='item'\r\n                            onChange = {this.handleItemChange}\r\n                            custom\r\n                        >\r\n                            <option value=\"0\">PRODUCT 1</option>\r\n                            <option value=\"1\">PRODUCT 2</option>\r\n                            <option value=\"2\">PRODUCT 3</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label htmlFor='qty'>Qty: </Form.Label>\r\n                        <Form.Control \r\n                            type='number' \r\n                            id='qty' \r\n                            onChange = {this.handleQtyChange}\r\n                            onKeyPress = {this.handleEnter}\r\n                            autoComplete = \"off\"\r\n                        />\r\n                    </Form.Group> \r\n                    <Form.Group>\r\n                        <Form.Label htmlFor='price'>Price per Item: </Form.Label>\r\n                        <Form.Control \r\n                            type='number' \r\n                            id='price'\r\n                            onChange = {this.handlePriceChange}\r\n                            onKeyPress = {this.handleEnter}\r\n                            autoComplete = \"off\"        \r\n                        />\r\n                    </Form.Group>\r\n                    <Button \r\n                        variant= 'secondary' \r\n                        type='button' \r\n                        onClick = {this.onButtonPress}\r\n                    >\r\n                        Add Items\r\n                    </Button> \r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddStockForm;","import React, { Component } from 'react'\r\nimport './BuyersForm.css'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { MDBTypography } from 'mdbreact'\r\n\r\n\r\nconst items = {\r\n    email: '',\r\n    item: '',\r\n    qty: 0\r\n}\r\n\r\n\r\nclass AddStockForm extends Component {\r\n\r\n    //updates email variable when user types\r\n    handleEmailChange = (event) => {\r\n        items.email = event.target.value\r\n        console.log(items.email)\r\n    }\r\n    \r\n    //updates item variable when user type\r\n    handleItemChange = (event) => {\r\n        items.item = event.target.value\r\n        console.log(items.item)\r\n    }\r\n\r\n    //updates qty variable when user types\r\n    handleQtyChange = (event) => {\r\n        items.qty = event.target.value\r\n        console.log(items.qty)\r\n    }\r\n\r\n    //Triggers onSubmit method when enter is pressed\r\n    handleEnter = (event) => {\r\n        if(event.key === 'Enter'){\r\n            this.props.onSubmitOrder(items)\r\n        }\r\n    }\r\n\r\n    onButtonPress = () => {\r\n        this.props.onSubmitOrder(items)\r\n    }\r\n\r\n    render(){\r\n\r\n        const { error, msg, stateItems } = this.props\r\n\r\n        return(\r\n            <div>\r\n                {\r\n                    //Dynamic changes to page depending on user action\r\n                    error.status === 'true' \r\n                        ?\r\n                            <center>\r\n                                <MDBTypography tag='h2'>Buy Items</MDBTypography>\r\n                                <MDBTypography tag='h5' className='error'>{ error.msg }</MDBTypography>\r\n                            </center>\r\n                        :    \r\n                            (\r\n                                msg !== '' \r\n                                    ?\r\n                                    <center>\r\n                                        <MDBTypography tag='h2'>Buy Items</MDBTypography>\r\n                                        <MDBTypography tag='h5' >{ msg }</MDBTypography>\r\n                                    </center>\r\n                                :\r\n                                    <center>\r\n                                        <MDBTypography tag='h2' className='innitialAddHeading'>Buy Items</MDBTypography>\r\n                                    </center>    \r\n                            )                                    \r\n                }\r\n                <Form>\r\n                    <Form.Group>\r\n                        <Form.Label htmlFor='email'>Email: </Form.Label>\r\n                        <Form.Control \r\n                            type='email' \r\n                            id='email' \r\n                            onChange = {this.handleEmailChange}\r\n                            onKeyPress = {this.handleEnter}\r\n                        />\r\n                    </Form.Group> \r\n                    <Form.Group>\r\n                        <Form.Label htmlFor='item'>Item: </Form.Label>\r\n                        <Form.Control \r\n                            as='select'\r\n                            id='item'\r\n                            onChange = {this.handleItemChange}\r\n                            custom\r\n                        >\r\n                            <option value=\"0\">{ 'PRODUCT 1 - Price: R' +  stateItems[0].avrPrice + ' Stock: ' + stateItems[0].qty }</option>\r\n                            <option value=\"1\">{ 'PRODUCT 2 - Price: R' +  stateItems[1].avrPrice + ' Stock: ' + stateItems[1].qty }</option>\r\n                            <option value=\"2\">{ 'PRODUCT 3 - Price: R' +  stateItems[2].avrPrice + ' Stock: ' + stateItems[2].qty }</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Label htmlFor='qty'>Qty: </Form.Label>\r\n                        <Form.Control \r\n                            type='number' \r\n                            id='qty' \r\n                            onChange = {this.handleQtyChange}\r\n                            onKeyPress = {this.handleEnter}\r\n                            autoComplete = \"off\"\r\n                        />\r\n                    </Form.Group> \r\n                    <Button \r\n                        variant= 'secondary' \r\n                        type='button' \r\n                        onClick = {this.onButtonPress}\r\n                    >\r\n                        Buy Items\r\n                    </Button> \r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddStockForm;","import React, { Component } from 'react'\r\nimport './ViewStock.css'\r\nimport {  Table  } from 'react-bootstrap'\r\nimport { MDBTypography } from 'mdbreact'\r\n\r\n\r\n\r\nclass AddStockForm extends Component {\r\n\r\n    render(){\r\n        const { stateItems } =  this.props\r\n        \r\n        return(\r\n            <div>\r\n                <center><MDBTypography tag='h2'>Stock Table</MDBTypography></center>\r\n                <Table striped bordered hover size=\"sm\">\r\n                    <thead>\r\n                        <tr>\r\n                        <th></th>\r\n                        <th>Product</th>\r\n                        <th>Qty</th>\r\n                        <th>Price</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                        <td>1</td>\r\n                        <td>PRODUCT 1</td>\r\n                        <td>{ stateItems[0].qty }</td>\r\n                        <td>{ 'R ' + stateItems[0].avrPrice.toFixed(2) }</td>\r\n                        </tr>\r\n                        <tr>\r\n                        <td>2</td>\r\n                        <td>PRODUCT 2</td>\r\n                        <td>{ stateItems[1].qty }</td>\r\n                        <td>{ 'R ' + stateItems[1].avrPrice.toFixed(2) }</td>\r\n                        </tr>\r\n                        <tr>\r\n                        <td>3</td>\r\n                        <td>PRODUCT 3</td>\r\n                        <td>{ stateItems[2].qty }</td>\r\n                        <td>{ 'R ' + stateItems[2].avrPrice.toFixed(2) }</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddStockForm;","import React, { Component } from 'react'\nimport AddStockForm from '../components/AddStockForm/AddStockForm'\nimport BuyersForm from '../components/BuyersForm/BuyersForm'\nimport ViewStock from '../components/ViewStock/ViewStock'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { Navbar, Button } from 'react-bootstrap'\nimport { MDBTypography } from 'mdbreact'\nimport './App.css'\n\n//This creates an object to store data for the session\nconst initialState = {\n  stateItems: [\n    {\n      item: '0',\n      qty: 0,\n      avrPrice: 0,\n      count: 0\n    },\n    {\n      item: '1',\n      qty: 0,\n      avrPrice: 0,\n      count: 0\n    },\n    {\n      item: '2',\n      qty: 0,\n      avrPrice: 0,\n      count: 0\n    }\n  ],\n  emails: ['test'],\n  error:  {\n    msg: '',\n    status: 'false'\n  },\n  msg: '', \n  loc: 'AddStock'\n}\n\n\nclass App extends Component {\n  \n  constructor(){\n    super();\n    this.state = initialState; //Creates that state object\n  }\n\n  //Uses user input to update the state variable. Used with AddStockForm\n  onSubmitItems = ( items ) => {\n    const { stateItems } = this.state\n    \n    if(items.qty > 0 && items.price > 0){\n      const currQty = stateItems[Number(items.item)].qty\n      const totalQty = Number(currQty) + Number(items.qty)\n      stateItems[Number(items.item)].qty = totalQty\n\n      const currAvr = stateItems[Number(items.item)].avrPrice\n      const currCount = stateItems[Number(items.item)].count\n      const totalAvr = (Number(currAvr)*Number(currCount) + Number(items.price) * Number(items.qty)) / (Number(currCount) + Number(items.qty))\n      stateItems[Number(items.item)].avrPrice = totalAvr\n      stateItems[Number(items.item)].count = Number(currCount) + Number(items.qty)\n\n      this.setState({ stateItems: stateItems , msg: items.qty + ' Items added successfully', error: {status: 'false'}})\n    } else if(items.qty < 0){\n      this.setState({ error: { msg: 'The qty must be larger than zero' , status: 'true'}})\n    }else {\n      this.setState({ error: { msg: 'The price must be larger than zero' , status: 'true'}})\n    }\n  }\n\n  //Uses user input to update the state variable. Used with BuyersForm\n  onSubmitOrder = ( items ) => {\n    const { stateItems , emails } = this.state\n    const pattern = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n    if(items.email === ''){\n      this.setState({error: {msg: 'You must enter a email address', status: 'true'}})\n    }else if(!items.email.match(pattern)){\n      this.setState({error: {msg: 'That is not a valid email address', status: 'true'}})\n    }else if(emails.includes(items.email)){\n      this.setState({error: {msg: 'You have already made a purchase', status: 'true'}}) \n    }else{\n      if(items.qty > 0){\n        if(stateItems[Number(items.item)] < items.qty){\n          this.setState({error: {msg: 'There is currently not enough stock of that item', status: 'true'}})\n        }else{\n          emails.push(items.email)\n\n          const currQty = stateItems[Number(items.item)].qty\n          const totalQty = Number(currQty) - items.qty\n          stateItems[Number(items.item)].qty = totalQty\n\n          this.setState({ \n            stateItems: stateItems , \n            msg: 'Your total cost is R ' + (items.qty * stateItems[Number(items.item)].avrPrice) , \n            error: {status: 'false'}})\n        }\n      } else {\n        this.setState({ error: { msg: 'The qty must be larger than zero' , status: 'true'}})\n      }\n    }\n  } \n\n  changeLocation = (event) => {\n    const btn = event.target.id\n    \n    this.setState({ loc: btn })\n  }\n \n  render() {\n    \n    const { error, msg, loc, stateItems  } = this.state\n\n    return(\n      <div>\n        <center className='mainHeading'><MDBTypography tag='h1' variant='display-1'>Corner Store</MDBTypography></center>\n        <Navbar variant=\"dark\" bg=\"dark\" className='row justify-content-center nav'>\n            <Button variant='secondary' className='navBtn' id='AddStock' onClick={ this.changeLocation } >Add Stock</Button>\n            <Button variant='secondary' className='navBtn' id='BuyItems' onClick={ this.changeLocation } >Buy Items</Button>\n            <Button variant='secondary' className='navBtn' id='ViewStock' onClick={ this.changeLocation } >View Stock</Button>\n        </Navbar>\n         {\n          loc === 'AddStock' \n            ? \n              <AddStockForm onSubmitItems={this.onSubmitItems} error={ error } msg={ msg } />\n            :\n             (\n               loc === 'BuyItems' \n                ? \n                  <BuyersForm onSubmitOrder={this.onSubmitOrder} error={ error } msg={ msg } stateItems={ stateItems } />\n                :\n                  <ViewStock stateItems={ stateItems } />  \n             )\n         } \n                 \n      </div>\n    );\n  }  \n} \n  \n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}